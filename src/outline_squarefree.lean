import analysis.p_series
import number_theory.arithmetic_function
import algebra.squarefree
import data.list.intervals
import tactic
import measure_theory.integral.interval_integral

noncomputable theory
-- open_locale classical
open nat finset list finsupp set function filter
open_locale classical topological_space interval big_operators filter ennreal asymptotics

def squarefree_nat (n : ‚Ñï) := if squarefree n then (1 : ‚Ñ§) else (0 : ‚Ñ§)

def Q (n : ‚Ñï) := ‚àë (i : ‚Ñï) in finset.range (n + 1), squarefree_nat i

def Q' (n : ‚Ñï) := (6 * (n : ‚Ñù) / real.pi^2)

def zeta2 (n : ‚Ñï) := ‚àë (i : ‚Ñï) in finset.range (n + 1), 1 / (i : ‚Ñù) ^ 2

theorem zeta_2_eq_pi2_div_6 : tendsto zeta2 at_top (ùìù (real.pi ^ 2 / 6)) :=
begin
  sorry,
end

lemma nat_ne_zero_ne_one_ge_two {n : ‚Ñï} : n ‚â† 0 ‚àß n ‚â† 1 ‚Üî n ‚â• 2 :=
begin
  induction n,
  simp,
  have n_n_ge_one : n_n.succ ‚â• 1, {
    calc n_n.succ = n_n + 1 : by exact rfl
      ... ‚â• 0 + 1 : le_add_self
      ... ‚â• 1 : rfl.ge,
  },
  induction n_n,
  simp,
  have n_n_n_ge_two : n_n_n.succ.succ ‚â• 2, {
    calc n_n_n.succ.succ = n_n_n.succ + 1 : rfl
      ... ‚â• n_n_n + 1 + 1 : rfl.ge
      ... ‚â• n_n_n + 2 : rfl.ge
      ... ‚â• 0 + 2 : le_add_self
      ... ‚â• 2 : rfl.ge,
  },
  simp,
  linarith,
end

lemma nat_ne_zero_ne_one_two_le {n : ‚Ñï} : n ‚â† 0 ‚àß n ‚â† 1 ‚Üî 2 ‚â§ n :=
begin
  rw ‚Üê ge_iff_le,
  exact nat_ne_zero_ne_one_ge_two,
end

lemma pow_le_abs_pow {a : ‚Ñù} {b : ‚Ñï} : a^b ‚â§ |a| ^ b := begin
  by_cases 0 ‚â§ a,
  rwa abs_of_nonneg,
  have : a < 0, linarith,
  by_cases even b,
  cases h with k hk,
  rw [hk, pow_mul, pow_mul, ‚Üê abs_of_nonneg (pow_two_nonneg a), (pow_abs a)],
  have : odd b, simp [h],
  cases this with k hk,
  have : a ^ b ‚â§ 0, {
    rw hk,
    rw pow_add,
    rw mul_nonpos_iff,
    left,
    split,
    rw pow_mul,
    simp [pow_two_nonneg a, pow_nonneg],
    linarith,
  },
  transitivity,
  exact this,
  simp [abs_nonneg, pow_nonneg],
end

lemma minus_one_pow_odd_eq_minus_one : ‚àÄ (a : ‚Ñï), odd a ‚Üí (-1 : ‚Ñ§) ^ a = -1 :=
begin
  intros a ha,
  cases ha with k hk,
  rw [hk, pow_add, pow_mul],
  simp,
end

lemma minus_one_pow_even_eq_one : ‚àÄ (a : ‚Ñï), even a ‚Üí (-1 : ‚Ñ§) ^ a = 1 :=
begin
  intros a ha,
  cases ha with k hk,
  rw [hk, pow_mul],
  simp,
end

lemma minus_one_pow_eq_pm_one {a : ‚Ñï} : (-1 : ‚Ñ§) ^ a = 1 ‚à® (-1 : ‚Ñ§) ^ a = -1 :=
begin
  have : odd a ‚à® even a, simp [odd_iff_not_even, or.symm, or_not],
  cases this,
  simp [minus_one_pow_odd_eq_minus_one a this],
  simp [minus_one_pow_even_eq_one a this],
end

lemma abs_mu_le_one {a : ‚Ñï} : |arithmetic_function.moebius a| ‚â§ 1 :=
begin
  unfold arithmetic_function.moebius,
  simp,
  by_cases h : squarefree a,
  simp [h],
  simp [h],
end

lemma break_up_sum_sets : ‚àÄ (x X : ‚Ñï), disjoint {d | d < x} {d | x ‚â§ d ‚àß d ‚â§ X} :=
begin
  intros x X,
  rw disjoint_iff_forall_ne,
  intros y hy z hz,
  by_contradiction H,
  have : y < y,
    calc y < x : hy
      ... ‚â§ z : hz.left
      ... = y : H.symm,
  linarith,
end

lemma extend_sum_le (a x X : ‚Ñï) (hax : a ‚â§ x) (hxX : x ‚â§ X) (f : ‚Ñï ‚Üí ‚Ñù) (hf : ‚àÄ (y : ‚Ñï), 0 ‚â§ f y) : (‚àë y in Ico a x, f y) ‚â§ (‚àë y in Ico a X, f y) :=
begin
  have : finset.Ico a X = finset.Ico a x ‚à™ finset.Ico x X, {
    rw finset.Ico_union_Ico_eq_Ico hax hxX,
  },
  have : (‚àë y in Ico a X, f y) = (‚àë y in Ico a x, f y) + (‚àë y in Ico x X, f y),
  {
    rw this,
    apply finset.sum_union,
    exact Ico_disjoint_Ico_consecutive a x X,
  },
  rw this,
  simp,
  have : ‚àÄ (i : ‚Ñï), i ‚àà finset.Ico x X ‚Üí 0 ‚â§ f i, {
    intros i hi,
    exact hf i,
  },
  apply finset.sum_nonneg,
  intros i hi,
  exact this i hi,
end

lemma one_dirichlet_summable : ‚àÄ (d : ‚Ñï), 2 ‚â§ d ‚Üí summable (Œª (n : ‚Ñï), ((n : ‚Ñù) ^ d)‚Åª¬π) :=
begin
  intros d hd,
  apply real.summable_nat_pow_inv.mpr,
  linarith,
end

lemma bounded_dirichlet_summable
(f : ‚Ñï ‚Üí ‚Ñù)
(hC : ‚àÉ C, ‚àÄ (n : ‚Ñï), |f n| ‚â§ C) :
 ‚àÄ (d : ‚Ñï), 2 ‚â§ d
 ‚Üí summable (Œª (n : ‚Ñï), (f n) * ((n : ‚Ñù) ^ d)‚Åª¬π):=
begin
  intros d hd,
  rw ‚Üê summable_abs_iff,
  have : (Œª (x : ‚Ñï), | f x * (‚Üëx ^ d)‚Åª¬π |) = (Œª (x : ‚Ñï), |f x | * |(‚Üëx ^ d)‚Åª¬π|), {
    ext,
    rw abs_mul,
  },
  rw this,
  cases hC with C hC,
  apply summable_of_nonneg_of_le,
  intros b,
  rw ‚Üê abs_mul,
  refine abs_nonneg _,
  intros b,
  have : |f b| * |(‚Üëb ^ d)‚Åª¬π| ‚â§ C * |(‚Üëb ^ d)‚Åª¬π|, {
    specialize hC b,
    apply mul_le_mul hC rfl.le,
    refine abs_nonneg _,
    transitivity,
    exact abs_nonneg (f b),
    exact hC,
  },
  exact this,
  apply summable.mul_left,
  have : ‚àÄ (b : ‚Ñï), 0 ‚â§ ((b : ‚Ñù) ^ d)‚Åª¬π, {
    intros b,
    simp,
  },
  have ffff : (Œª (n : ‚Ñï), ((n : ‚Ñù) ^ d)‚Åª¬π) = (Œª (n : ‚Ñï), |((n : ‚Ñù) ^ d)‚Åª¬π|), {
    ext,
    rw abs_of_nonneg,
    exact this x,
  },
  rw ‚Üê ffff,
  exact one_dirichlet_summable d hd,
end

def Œº := arithmetic_function.moebius

def Œº_over_d2 (d : ‚Ñï) := ‚Üë(Œº d) * ((d : ‚Ñù) ^ 2)‚Åª¬π

def heaviside (d e : ‚Ñï) := ite (e < d) 0 1

def anti_heaviside (d e : ‚Ñï) := ite (e < d) 1 0

def Œº_over_d2_upto (d : ‚Ñï) := (‚àë i in finset.Ico 1 d, Œº_over_d2 i)

def Œº_over_d2_heaviside (d i : ‚Ñï) := ‚Üë(heaviside d i) * (Œº_over_d2 i)

def Œº_over_d2_anti_heaviside (d i : ‚Ñï) := ‚Üë(anti_heaviside d i) * (Œº_over_d2 i)

def Œº_over_d2_from (d : ‚Ñï) := (‚àë' i, Œº_over_d2_heaviside d i)

def one_over_d2_from (d : ‚Ñï) := (‚àë' i, ‚Üë(heaviside d i) * ((i : ‚Ñù) ^ 2)‚Åª¬π)

lemma compl_heaviside (d : ‚Ñï) (f : ‚Ñï ‚Üí ‚Ñù) : (Œª n, ‚Üë(heaviside d n) * (f n)) + (Œª n, ‚Üë(anti_heaviside d n) * (f n)) = f :=
begin
  ext,
  unfold heaviside,
  unfold anti_heaviside,
  by_cases x < d,
  simp [h], simp [h],
end

lemma summable_Œº_over_d2 : summable Œº_over_d2 :=
begin
  apply bounded_dirichlet_summable,
  use 1, intros n,
  unfold Œº,
  unfold arithmetic_function.moebius,
  simp,
  by_cases squarefree n,
  simp [h], simp [h],
end

lemma summable_of_mul_heaviside (d : ‚Ñï) (f : ‚Ñï ‚Üí ‚Ñù) : summable f ‚Üí summable (Œª n, ‚Üë(heaviside d n) * (f n)) :=
begin
  intros hf,
  rw ‚Üê summable_abs_iff,
  unfold heaviside,
  have : summable (Œª n, |f n|), {
    exact summable_abs_iff.mpr hf,
  },
  apply summable_of_nonneg_of_le,
  intros b, exact abs_nonneg _,
  intros b,
  have foo : |‚Üë(ite (b < d) 0 1) * f b| ‚â§ |f b|, {
    by_cases b < d, simp [h, abs_nonneg], simp [h],
  },
  exact foo,
  exact this,
end

lemma summable_of_mul_anti_heaviside (d : ‚Ñï) (f : ‚Ñï ‚Üí ‚Ñù) : summable f ‚Üí summable (Œª n, ‚Üë(anti_heaviside d n) * (f n)) :=
begin
  intros hf,
  rw ‚Üê summable_abs_iff,
  unfold anti_heaviside,
  have : summable (Œª n, |f n|), {
    exact summable_abs_iff.mpr hf,
  },
  apply summable_of_nonneg_of_le,
  intros b, exact abs_nonneg _,
  intros b,
  have foo : |‚Üë(ite (b < d) 1 0) * f b| ‚â§ |f b|, {
    by_cases b < d, simp [h], simp [h, abs_nonneg],
  },
  exact foo,
  exact this,
end

lemma summable_Œº_over_d2_heaviside (d : ‚Ñï) : summable (Œº_over_d2_heaviside d) :=
begin
  apply summable_of_mul_heaviside,
  exact summable_Œº_over_d2,
end

lemma summable_Œº_over_d2_anti_heaviside (d : ‚Ñï) : summable (Œº_over_d2_anti_heaviside d) :=
begin
  apply summable_of_mul_anti_heaviside,
  exact summable_Œº_over_d2,
end

def Œº_sum_at_2 := ‚àë' i, Œº_over_d2 i

def one_over_d2 (d : ‚Ñï) := ((d : ‚Ñù)^2)‚Åª¬π

lemma asdf (d : ‚Ñï) : Œº_sum_at_2 - Œº_over_d2_upto d = Œº_over_d2_from d :=
begin
  unfold Œº_sum_at_2,
  unfold Œº_over_d2_upto,
  unfold Œº_over_d2_from,

  have is_out_val : ‚àÄ (b : ‚Ñï), b ‚àâ finset.Ico 1 d ‚Üí ‚Üë(anti_heaviside d b) * Œº_over_d2 b = 0, {
    intros b hb,
    simp at hb,
    by_cases b = 0,
    simp [h, anti_heaviside, Œº_over_d2],
    have : 1 ‚â§ b, {
      exact one_le_iff_ne_zero.mpr h,
    },
    specialize hb this,
    simp [anti_heaviside],
    intros hhb,
    exfalso,
    linarith,
  },

  have is_in_val : ‚àÄ (b : ‚Ñï), b ‚àà finset.Ico 1 d ‚Üí ‚Üë(anti_heaviside d b) * Œº_over_d2 b = Œº_over_d2 b, {
    intros b hb,
    simp at hb,
    simp [hb.right, anti_heaviside],
  },


  have : ‚àë' i, ‚Üë(anti_heaviside d i) * Œº_over_d2 i = ‚àë (i : ‚Ñï) in Ico 1 d, ‚Üë(anti_heaviside d i) * Œº_over_d2 i,
  {
    exact tsum_eq_sum is_out_val,
  },
  have fdfdfd : ‚àë (i : ‚Ñï) in Ico 1 d, ‚Üë(anti_heaviside d i) * Œº_over_d2 i = ‚àë (i : ‚Ñï) in Ico 1 d, Œº_over_d2 i,
  {
    apply finset.sum_congr,
    exact rfl,
    intros x hx,
    exact is_in_val x hx,
  },
  rw ‚Üê fdfdfd,
  rw ‚Üê tsum_eq_sum,
  {
    rw ‚Üê tsum_sub,
    rw ‚Üê compl_heaviside d Œº_over_d2,
    apply tsum_congr,
    intros b,
    unfold Œº_over_d2_heaviside,
    simp [compl_heaviside],
    conv {
      to_lhs,
      congr,
      rw ‚Üê compl_heaviside d Œº_over_d2,
      simp,
    },
    ring,
    exact summable_Œº_over_d2,
    exact summable_Œº_over_d2_anti_heaviside d,
  },
  intros x hx,
  exact is_out_val x hx,
end

lemma abs_tsum_le_tsum_abs (f : ‚Ñï ‚Üí ‚Ñù) : | ‚àë' i, f i | ‚â§ (‚àë' i, |f i|) :=
begin
  by_cases summable f,
  have : summable (Œª n, |f n|), simp [summable_abs_iff, h],
  sorry,
  have : ¬¨ summable (Œª n, |f n|), simp [summable_abs_iff, h],
  unfold tsum,
  simp [h, this],
end

lemma abs_sum_le_sum_abs' (f : ‚Ñï ‚Üí ‚Ñù) (s : finset ‚Ñï): | ‚àë d in s, f d | ‚â§ ‚àë d in s, | f d | :=
begin
  apply finset.induction_on s,
  simp only [finset.sum_empty, abs_zero],
  {
    intros i s his IH,
    simp only [his, finset.sum_insert, not_false_iff],
    exact (abs_add _ _).trans (add_le_add (le_refl (|f i|)) IH),
  },
end

lemma sum_const_one (s : finset ‚Ñï) : ‚àë i in s, (1 : ‚Ñù) = ‚Üës.card :=
begin
  have : s.card = s.card * 1, simp,
  rw this,
  simp,
end

def is_square (n : ‚Ñï) : Prop := ‚àÉ s, s * s = n

instance : decidable_pred (is_square : ‚Ñï ‚Üí Prop)
| n := decidable_of_iff' _ (nat.exists_mul_self n)

def num_square_divisors (n : ‚Ñï) := (n.divisors.filter is_square).card

def divides (d : ‚Ñï) (n : ‚Ñï) : Prop := d ‚à£ n

def num_divides_upto (d : ‚Ñï) (n : ‚Ñï) := ((finset.Icc 1 n).filter (divides d)).card

lemma Icc_neighbor_disjoint {a b c : ‚Ñï} (hab : a ‚â§ b) (hbc : b < c) :
  ((finset.Icc a b) ‚à™ (finset.Icc (b + 1) c) = finset.Icc a c) ‚àß
  disjoint (finset.Icc a b) (finset.Icc (b + 1) c) :=
begin
  split,
  {
    ext d,
    split,
    intros hd,
    simp at hd,
    simp,
    cases hd,
    simp [hd.left],
    transitivity,
    exact hd.right,
    exact le_of_lt hbc,
    have : b ‚â§ b + 1, exact le_succ b,
    split,
    transitivity,
    exact hab,
    transitivity,
    exact this,
    exact hd.left,
    exact hd.right,
    intros hd,
    simp at hd,
    simp,
    by_cases d ‚â§ b,
    left,
    simp [hd.left, h],
    push_neg at h,
    rw lt_iff_add_one_le at h,
    right,
    exact ‚ü®h, hd.right‚ü©,
  },
  {
    rw finset.disjoint_iff_ne,
    intros d hd e he,
    simp at hd,
    simp at he,
    have : d < e, {
      calc d ‚â§ b : hd.right
        ... < b + 1 : lt_succ_self b
        ... ‚â§ e : he.left,
    },
    linarith,
  },
end


lemma num_divides_upto_eq (d n : ‚Ñï) : num_divides_upto d n = n.div d :=
begin
  unfold num_divides_upto,
  induction n with n hn,
  dec_trivial,
  have aaa : 1 ‚â§ n, sorry,
  have bbb : n ‚â§ n.succ, sorry,

  have is_union : (finset.Icc 1 n) ‚à™ (finset.Icc n.succ n.succ) = finset.Icc 1 n.succ, {
    sorry,
  },
  have is_disjoint : disjoint (finset.Icc 1 n) (finset.Icc n.succ n.succ), {
    sorry,
  },
  rw ‚Üê is_union,
  rw filter_union,
  have : disjoint (filter (divides d) (finset.Icc 1 n)) (filter (divides d) (finset.Icc n.succ n.succ)), {
    exact disjoint_filter_filter is_disjoint,
  },
  rw card_disjoint_union this,
  rw hn,
  simp,
  have dvd_case : d ‚à£ n.succ ‚Üí (finset.filter (divides d) {n.succ}).card = 1, {
    intros hd,
    rw card_eq_one,
    use n.succ,
    rw finset.eq_singleton_iff_unique_mem,
    split,
    rw finset.mem_filter,
    unfold divides,
    simp [hd],
    intros x,
    rw finset.mem_filter,
    rintros ‚ü®hx, hxx‚ü©,
    exact finset.mem_singleton.mp hx,
  },
  have not_dvd_case : ¬¨ (d ‚à£ n.succ) ‚Üí (finset.filter (divides d) {n.succ}).card = 0, {
    intros hd,
    rw card_eq_zero,
    rw finset.eq_empty_iff_forall_not_mem,
    intros x,
    rw finset.mem_filter,
    push_neg,
    intros hx,
    rw finset.mem_singleton at hx,
    rwa ‚Üê hx at hd,
  },
  by_cases d ‚à£ n.succ,
  {
    rw dvd_case h,
    have : n.succ.div d = (n + 1) / d, exact rfl,
    rw this,
    rw succ_div,
    have : n.div d = n / d, exact rfl,
    rw this,
    have : n.succ = n + 1, exact rfl,
    rw this at h,
    simp [h],
  },
  {
    rw not_dvd_case h,
    have : n.succ.div d = (n + 1) / d, exact rfl,
    rw this,
    rw succ_div,
    have : n.div d = n / d, exact rfl,
    rw this,
    have : n.succ = n + 1, exact rfl,
    rw this at h,
    simp [h],
  },
end



lemma step0 (n : ‚Ñï) :
ite (squarefree n) 1 0 = ‚àë d in finset.Icc 1 n, ite (d ^ 2 ‚à£ n) (Œº d) 0 :=
begin
  by_cases squarefree n,
  {
    simp [h],
    rw sum_ite,
    simp,
    have : (finset.filter (Œª (x : ‚Ñï), x ^ 2 ‚à£ n) (finset.Icc 1 n)) = {1}, {
      rw finset.eq_singleton_iff_unique_mem,
      split,
      rw finset.mem_filter,
      have : n ‚â† 0, {
        by_contradiction H,
        rw H at h,
        exact not_squarefree_zero h,
      },
      simp,
      sorry, -- 1 ‚â§ n bc n ‚â† 0 ugh really should be easier
      {
        intros x hx,
        rw finset.mem_filter at hx,
        unfold squarefree at h,
        specialize h x,
        have : is_unit x, {
          rw pow_two at hx,
          exact h hx.right,
        },
        exact nat.is_unit_iff.mp this,
      },
    },
    rw this,
    rw finset.sum_singleton,
    have : Œº 1 = 1, sorry,
    rw ‚Üê this,
  },
  {
    simp [h],
    sorry,
  },
end

lemma step2 :
‚àÄ (x : ‚Ñï),
(‚àë n in finset.Icc 1 x, ‚àë d in finset.Icc 1 x, ite (d ^ 2 ‚à£ n) (Œº d) 0) =
(‚àë d in finset.Icc 1 x, ((Œº d) * (num_divides_upto (d^2) x)))
:=
begin
  intros x,
  unfold num_divides_upto,
  have : ‚àÄ (y : ‚Ñï) (s : finset ‚Ñï), ‚Üë(‚àë a in s, 1) * (Œº y) = ‚àë a in s, (Œº y), {
    simp,
  },
  conv {
    to_rhs,
    congr,
    skip,
    funext,
    rw card_eq_sum_ones,
    rw mul_comm,
    rw this,
  },
  rw finset.sum_comm,
  congr,
  funext,
  rw sum_ite,
  simp,
  left,
  congr,
end


lemma step3 :
‚àÄ (x : ‚Ñï),
(‚àë d in finset.Icc 1 x, ((Œº d) * (num_divides_upto (d^2) x))) =
(‚àë d in finset.Icc 1 x, ((Œº d) * x.div (d^2)))
:=
begin
  intros x,
  apply finset.sum_congr,
  simp,
  intros y hy,
  rw num_divides_upto_eq,
end

lemma step35 :
‚àÄ (x : ‚Ñï),
(‚àë d in finset.Icc 1 x, ((Œº d) * x.div (d^2))) =
(‚àë d in finset.Icc 1 (sqrt x), ((Œº d) * x.div (d^2)))
:=
begin
  intros x,
  have : finset.Icc 1 x = (finset.Icc 1 (sqrt x)) ‚à™ (finset.Icc ((sqrt x) + 1) x),
  {
    sorry,
  },
  rw this,
  have : disjoint (finset.Icc 1 (sqrt x)) (finset.Icc ((sqrt x) + 1) x), {
    sorry,
  },
  rw finset.sum_union this,
  simp,
  apply sum_eq_zero,
  intros y hy,
  have : x.div (y ^ 2) = x / (y ^ 2), exact rfl,
  rw this,
  simp,
  right,
  rw int.div_eq_zero_of_lt,
  linarith,
  simp at hy,
  have aaa : x < ((sqrt x) + 1) ^ 2, exact nat.lt_succ_sqrt' x,
  have bbb : ((sqrt x) + 1) ^ 2 ‚â§ y ^ 2, sorry,
  sorry, --- need to get from ‚Ñï to ‚Ñ§
end

--- Here we need to lop off the endpoint of the Icc to get an Ico for the rest of our lemmas

def sum_Œº_times_floor_n_over_d2 (n : ‚Ñï) :=
((‚àë d in finset.Ico 1 (sqrt n), (Œº d) * n.div (d^2)) : ‚Ñù)

def sum_Œº_times_n_over_d2 (n : ‚Ñï) :=
‚àë d in finset.Ico 1 (sqrt n), ‚Üë(Œº d) * ‚Üën * ((d : ‚Ñù) ^ 2)‚Åª¬π

lemma step4 :
asymptotics.is_O
(Œª (n : ‚Ñï), sum_Œº_times_floor_n_over_d2 n - sum_Œº_times_n_over_d2 n)
(Œª n, ((sqrt n) : ‚Ñù))
at_top
:=
begin
  unfold asymptotics.is_O,
  use 1,
  unfold asymptotics.is_O_with,
  simp,
  use 100,
  intros b hb,
  rw real.norm_eq_abs,
  unfold sum_Œº_times_floor_n_over_d2,
  unfold sum_Œº_times_n_over_d2,
  rw ‚Üê finset.sum_sub_distrib,
  have : |‚àë (x : ‚Ñï) in finset.Ico 1 (sqrt b), (((Œº x) * (b.div (x ^ 2)) : ‚Ñù) - (‚Üë(Œº x) * ‚Üëb * ((x : ‚Ñù) ^ 2)‚Åª¬π))| ‚â§ ‚àë (x : ‚Ñï) in finset.Ico 1 (sqrt b), |(‚Üë(Œº x) * (b.div (x ^ 2)) - ‚Üë(Œº x) * ‚Üëb * (‚Üëx ^ 2)‚Åª¬π)|, {
    apply abs_sum_le_sum_abs',
  },
  have foo : ‚àÄ (x : ‚Ñï), |(((Œº x) * (b.div (x ^ 2)) : ‚Ñù) - ‚Üë(Œº x) * ‚Üëb * (‚Üëx ^ 2)‚Åª¬π)| ‚â§ 1, {
    intros x,
    have : ((Œº x) * (b.div (x ^ 2)) : ‚Ñù) = ((Œº x) : ‚Ñù) * ((b.div (x^2)) : ‚Ñù), simp,
    rw this,
    have : ((Œº x) : ‚Ñù) * ((b : ‚Ñù) * ((x : ‚Ñù) ^ 2)‚Åª¬π) = ((Œº x) : ‚Ñù) * (b : ‚Ñù) * ((x : ‚Ñù) ^ 2)‚Åª¬π, {
      ring,
    },
    rw ‚Üê this,
    have : ((Œº x) : ‚Ñù) * (((b.div (x^2)) : ‚Ñù) - (b : ‚Ñù) * ((x : ‚Ñù) ^ 2)‚Åª¬π) = (((Œº x) : ‚Ñù) * ((b.div (x^2)) : ‚Ñù) - ((Œº x) : ‚Ñù) * ((b : ‚Ñù) * ((x : ‚Ñù) ^ 2)‚Åª¬π)), {
      exact mul_sub _ _ _,
    },
    rw ‚Üê this,
    rw abs_mul,
    have : |((Œº x) : ‚Ñù)| ‚â§ 1, { sorry, },
    --  |‚Üë(‚áëŒº x)| * |‚Üë(b.div (x ^ 2)) - ‚Üëb * (‚Üëx ^ 2)‚Åª¬π| ‚â§ 1
    have aaa : |((Œº x) : ‚Ñù)| * | ((b.div (x^2)) : ‚Ñù) - (b : ‚Ñù) * ((x : ‚Ñù) ^ 2)‚Åª¬π| ‚â§ | ((b.div (x^2)) : ‚Ñù) - ((b : ‚Ñù) * (x : ‚Ñù) ^ 2)‚Åª¬π|, {
      sorry,
      -- calc |((Œº x) : ‚Ñù)| * | ((b.div (x^2)) : ‚Ñù) - ((b : ‚Ñù) * (x : ‚Ñù) ^ 2)‚Åª¬π| ‚â§ 1 * | ((b.div (x^2)) : ‚Ñù) - ((b : ‚Ñù) * (x : ‚Ñù) ^ 2)‚Åª¬π| : by { sorry, }
      --    ... = | ((b.div (x^2)) : ‚Ñù) - ((b : ‚Ñù) * (x : ‚Ñù) ^ 2)‚Åª¬π| : by { sorry, },
    },
    have bbb : | ((b.div (x^2)) : ‚Ñù) - ((b : ‚Ñù) * (x : ‚Ñù) ^ 2)‚Åª¬π| ‚â§ 1, {
      sorry,
    },
    transitivity,
    exact aaa,
    exact bbb,
  },
  transitivity,
  exact this,
  have : ‚àë (x : ‚Ñï) in finset.Ico 1 (sqrt b), |(((Œº x) : ‚Ñù) * (b.div (x ^ 2)) - ‚Üë(Œº x) * ‚Üëb * (‚Üëx ^ 2)‚Åª¬π)| ‚â§ ‚àë (x : ‚Ñï) in finset.Ico 1 (sqrt b), (1 : ‚Ñù), {
    apply sum_le_sum,
    intros i hi,
    exact foo i,
  },
  transitivity,
  exact this,
  have : ‚àë (x : ‚Ñï) in finset.Ico 1 (sqrt b), (1 : ‚Ñù) = ((sqrt b) : ‚Ñù), {
    have : (finset.Ico 1 (sqrt b)).card = (sqrt b), sorry,
    conv {
      to_rhs,
      rw ‚Üê this,
    },
    apply sum_const_one,
  },
  simp [this],
end



lemma step5 :
asymptotics.is_O
(Œª (n : ‚Ñï), ‚Üën * Œº_sum_at_2 - n * Œº_over_d2_upto (sqrt n))
(Œª (n : ‚Ñï), ‚Üën * one_over_d2_from (sqrt n))
at_top
:=
begin
  unfold asymptotics.is_O,
  use 1,
  unfold asymptotics.is_O_with,
  simp,
  use 100,
  intros b hb,
  have : ‚Üëb * Œº_sum_at_2 - ‚Üëb * Œº_over_d2_upto (sqrt b) = ‚Üëb * (Œº_sum_at_2 - Œº_over_d2_upto (sqrt b)), ring,
  have : ‚à•‚Üëb * Œº_sum_at_2 - ‚Üëb * Œº_over_d2_upto (sqrt b)‚à• = ‚à•‚Üëb‚à• * ‚à•Œº_sum_at_2 - Œº_over_d2_upto (sqrt b)‚à•, {
    simp [real.norm_eq_abs, abs_mul, this],
  },
  rw this,
  rw asdf,
  rw real.norm_eq_abs,
  rw real.norm_eq_abs,
  rw real.norm_eq_abs,
  apply mul_le_mul,
  have : |(b : ‚Ñö)| = (b : ‚Ñö), {
    simp [abs_nonneg],
  },
  rw this,
  {
    unfold Œº_over_d2_from,
    unfold one_over_d2_from,
    have : ‚à•‚àë' (i : ‚Ñï), Œº_over_d2_heaviside (sqrt b) i‚à• ‚â§ ‚àë' (i : ‚Ñï), ‚à•Œº_over_d2_heaviside (sqrt b) i‚à•, {
      exact abs_tsum_le_tsum_abs (Œº_over_d2_heaviside (sqrt b)),
    },
    have : ‚àÄ (x : ‚Ñï), (Œª i, ‚à•Œº_over_d2_heaviside (sqrt b) i‚à•) x ‚â§ (Œª i, ‚Üë(heaviside (sqrt b) i) * (‚Üëi ^ 2)‚Åª¬π) x, {
      intros x,
      simp,
      unfold Œº_over_d2_heaviside,
      unfold heaviside,
      by_cases x < sqrt b,
      simp [h],
      simp [h],
      unfold Œº_over_d2,
      simp [abs_mu_le_one],
      have : ((x : ‚Ñù) ^ 2)‚Åª¬π = 1 * ((x : ‚Ñù) ^ 2)‚Åª¬π, simp,
      conv {
        to_rhs,
        rw this,
      },
      apply mul_le_mul,
      {
        simp [real.norm_eq_abs, abs_mu_le_one, Œº],
        sorry,  -- lift to ‚Ñù ?
      },
      exact rfl.le,
      simp [inv_nonneg, pow_nonneg],
      linarith,
    },
    -- keep going
  },
  exact abs_nonneg _,
  simp [hb],
end

/-
  Goal: set of lemmas to show that ‚àë_{d < ‚àöx} Œº(d) / d^2 = ‚àë_d Œº(d) / d^2 + O(‚àë_{d ‚â• ‚àöx} 1 / x^2)
  Need:
    * |Œº d| ‚â§ 1 - abs_mu_le_one
    * |‚àë| ‚â§ ‚àë||
    * {d < ‚àöx} ‚à™ {d ‚â• ‚àö x} = ‚Ñï
    * sums break apart along disjoints
    * some notion of infinite sums converging
-/
theorem squarefree_asymptotics : ‚ÜëQ ~[at_top] Q' :=
begin
  rw asymptotics.is_equivalent,
end